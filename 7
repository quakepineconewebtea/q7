def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    var34 = var9(arg1, arg2)
    if var34 < arg2:
        var39 = class9()
    else:
        var39 = class11()
    for var40 in range(25):
        var39.func10(var34, arg1)
    var62 = func13(arg2, var34)
    var63 = (-916 + (arg2 | var62 | var6 + var62 ^ 463)) - (arg2 ^ (var34 | (arg1 - var34)) - 138 | var6)
    var64 = arg2 - ((var34 | var63) - ((var6 - (var6 & (13 + var63) & var34 | arg1) ^ (var34 + arg1 ^ arg1 ^ (arg1 ^ (var34 & (var34 | arg1)) - arg1) + var6 & 2)) & 299918109) & var34) ^ var34
    result = var34 & (var64 & var62 - var64 + (-115 & var34))
    return result
def func13(arg41, arg42):
    var43 = arg42 - 740 ^ arg42 & arg41
    var44 = arg41 + (arg41 ^ var43) - arg42
    var45 = arg42 - (arg41 - var43) + var44
    var46 = var44 | (var45 & -782) | arg41
    var47 = var46 + (var44 | var45 + var44)
    var48 = (var47 | arg42) | var44 - var43
    var49 = (var45 | arg41) - arg42
    var50 = var48 + arg41 | var47 ^ var45
    var51 = (var45 + arg41 ^ arg42) - var45
    var52 = (-1754840113 ^ var46 & var45) - arg41
    var53 = var50 ^ arg41 & var47 - var44
    var54 = (var52 - var43) + var51 - var45
    var55 = var53 + var54
    if var52 < var44:
        var56 = arg41 + (arg42 - arg41 + 95)
    else:
        var56 = (arg41 | var50) & var52
    var57 = var45 - (var52 + var46) - arg41
    var58 = var45 + ((var46 | var51) + arg42)
    var59 = var50 ^ var51 - var44
    var60 = var57 - 678
    var61 = var50 + -953
    result = ((var58 + arg41 | (var46 - (arg42 & arg41) ^ var49)) | var55) & -950 | var54 + 258 & var60 & var59
    return result
class class11(object):
    def func10(self, arg37, arg38):
        result = -1 ^ arg38 | (arg38 | arg37)
        return result
class class9(object):
    def func10(self, arg35, arg36):
        result = ((0 - arg36 | 1164988288 & arg36) - -1256752782) & -1 | 1973137723
        return result
def func6(arg10, arg11):
    var15 = func7(arg11, arg10)
    var16 = 254415805 ^ (var15 + 382224434) - var15
    var17 = (arg10 & var15) ^ 32
    var18 = var15 | (arg10 | (var15 ^ -835332068))
    var19 = var15 | 116
    if var16 < var16:
        var20 = (arg10 & 411021503 - var16) ^ var18
    else:
        var20 = (arg10 | var19) ^ -316
    var21 = var17 & (var16 + var15) ^ var15
    var22 = (var19 ^ arg11 ^ 665670754) ^ var19
    var23 = var19 & (var22 ^ var18) + var17
    var24 = (var22 | var22 ^ var16) | var16
    var25 = (var18 + var15) ^ 228881007 | var23
    if var21 < var25:
        var26 = (478 & var25 - var17) + var15
    else:
        var26 = (var21 & var19 + 765) ^ var23
    var27 = arg10 ^ 322116050
    var28 = var25 - arg10
    var29 = var17 | arg10
    var30 = ((1904644337 + var27) + var19) - var22
    var31 = (1276428110 - var21 & var16) - var23
    if var28 < var21:
        var32 = ((var21 | var29) & var24) & var16
    else:
        var32 = var27 & var25
    var33 = var22 - (var15 - var29) - arg10
    result = ((var19 & (var15 | var29)) - var31 & var24 & var21 - var33 ^ -1504036372) & (var21 | arg11)
    return result
def func5():
    closure = [-2]
    def func4(arg7, arg8):
        closure[0] += func6(arg7, arg8)
        return closure[0]
    func = func4
    return func
var9 = func5()
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = (-6 | acc) & acc
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
def func7(arg12, arg13):
    closure = [0]
    def func8(acc, rest):
        var14 = closure[0] + ((rest & 2) - closure[0])
        closure[0] += var14
        if acc == 0:
            return var14
        else:
            result = func8(acc - 1, var14)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 65'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    var34 = var9(arg1, arg2)
    if var34 < arg2:
        var39 = class9()
    else:
        var39 = class11()
    for var40 in range(25):
        var39.func10(var34, arg1)
    var62 = func13(arg2, var34)
    var63 = (-916 + (arg2 | var62 | var6 + var62 ^ 463)) - (arg2 ^ (var34 | (arg1 - var34)) - 138 | var6)
    var64 = arg2 - ((var34 | var63) - ((var6 - (var6 & (13 + var63) & var34 | arg1) ^ (var34 + arg1 ^ arg1 ^ (arg1 ^ (var34 & (var34 | arg1)) - arg1) + var6 & 2)) & 299918109) & var34) ^ var34
    result = var34 & (var64 & var62 - var64 + (-115 & var34))
    return result
def func13(arg41, arg42):
    var43 = arg42 - 740 ^ arg42 & arg41
    var44 = arg41 + (arg41 ^ var43) - arg42
    var45 = arg42 - (arg41 - var43) + var44
    var46 = var44 | (var45 & -782) | arg41
    var47 = var46 + (var44 | var45 + var44)
    var48 = (var47 | arg42) | var44 - var43
    var49 = (var45 | arg41) - arg42
    var50 = var48 + arg41 | var47 ^ var45
    var51 = (var45 + arg41 ^ arg42) - var45
    var52 = (-1754840113 ^ var46 & var45) - arg41
    var53 = var50 ^ arg41 & var47 - var44
    var54 = (var52 - var43) + var51 - var45
    var55 = var53 + var54
    if var52 < var44:
        var56 = arg41 + (arg42 - arg41 + 95)
    else:
        var56 = (arg41 | var50) & var52
    var57 = var45 - (var52 + var46) - arg41
    var58 = var45 + ((var46 | var51) + arg42)
    var59 = var50 ^ var51 - var44
    var60 = var57 - 678
    var61 = var50 + -953
    result = ((var58 + arg41 | (var46 - (arg42 & arg41) ^ var49)) | var55) & -950 | var54 + 258 & var60 & var59
    return result
class class11(object):
    def func10(self, arg37, arg38):
        result = -1 ^ arg38 | (arg38 | arg37)
        return result
class class9(object):
    def func10(self, arg35, arg36):
        result = ((0 - arg36 | 1164988288 & arg36) - -1256752782) & -1 | 1973137723
        return result
def func6(arg10, arg11):
    var15 = func7(arg11, arg10)
    var16 = 254415805 ^ (var15 + 382224434) - var15
    var17 = (arg10 & var15) ^ 32
    var18 = var15 | (arg10 | (var15 ^ -835332068))
    var19 = var15 | 116
    if var16 < var16:
        var20 = (arg10 & 411021503 - var16) ^ var18
    else:
        var20 = (arg10 | var19) ^ -316
    var21 = var17 & (var16 + var15) ^ var15
    var22 = (var19 ^ arg11 ^ 665670754) ^ var19
    var23 = var19 & (var22 ^ var18) + var17
    var24 = (var22 | var22 ^ var16) | var16
    var25 = (var18 + var15) ^ 228881007 | var23
    if var21 < var25:
        var26 = (478 & var25 - var17) + var15
    else:
        var26 = (var21 & var19 + 765) ^ var23
    var27 = arg10 ^ 322116050
    var28 = var25 - arg10
    var29 = var17 | arg10
    var30 = ((1904644337 + var27) + var19) - var22
    var31 = (1276428110 - var21 & var16) - var23
    if var28 < var21:
        var32 = ((var21 | var29) & var24) & var16
    else:
        var32 = var27 & var25
    var33 = var22 - (var15 - var29) - arg10
    result = ((var19 & (var15 | var29)) - var31 & var24 & var21 - var33 ^ -1504036372) & (var21 | arg11)
    return result
def func5():
    closure = [-2]
    def func4(arg7, arg8):
        closure[0] += func6(arg7, arg8)
        return closure[0]
    func = func4
    return func
var9 = func5()
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = (-6 | acc) & acc
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
def func7(arg12, arg13):
    closure = [0]
    def func8(acc, rest):
        var14 = closure[0] + ((rest & 2) - closure[0])
        closure[0] += var14
        if acc == 0:
            return var14
        else:
            result = func8(acc - 1, var14)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 65'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    var34 = var9(arg1, arg2)
    if var34 < arg2:
        var39 = class9()
    else:
        var39 = class11()
    for var40 in range(25):
        var39.func10(var34, arg1)
    var62 = func13(arg2, var34)
    var63 = (-916 + (arg2 | var62 | var6 + var62 ^ 463)) - (arg2 ^ (var34 | (arg1 - var34)) - 138 | var6)
    var64 = arg2 - ((var34 | var63) - ((var6 - (var6 & (13 + var63) & var34 | arg1) ^ (var34 + arg1 ^ arg1 ^ (arg1 ^ (var34 & (var34 | arg1)) - arg1) + var6 & 2)) & 299918109) & var34) ^ var34
    result = var34 & (var64 & var62 - var64 + (-115 & var34))
    return result
def func13(arg41, arg42):
    var43 = arg42 - 740 ^ arg42 & arg41
    var44 = arg41 + (arg41 ^ var43) - arg42
    var45 = arg42 - (arg41 - var43) + var44
    var46 = var44 | (var45 & -782) | arg41
    var47 = var46 + (var44 | var45 + var44)
    var48 = (var47 | arg42) | var44 - var43
    var49 = (var45 | arg41) - arg42
    var50 = var48 + arg41 | var47 ^ var45
    var51 = (var45 + arg41 ^ arg42) - var45
    var52 = (-1754840113 ^ var46 & var45) - arg41
    var53 = var50 ^ arg41 & var47 - var44
    var54 = (var52 - var43) + var51 - var45
    var55 = var53 + var54
    if var52 < var44:
        var56 = arg41 + (arg42 - arg41 + 95)
    else:
        var56 = (arg41 | var50) & var52
    var57 = var45 - (var52 + var46) - arg41
    var58 = var45 + ((var46 | var51) + arg42)
    var59 = var50 ^ var51 - var44
    var60 = var57 - 678
    var61 = var50 + -953
    result = ((var58 + arg41 | (var46 - (arg42 & arg41) ^ var49)) | var55) & -950 | var54 + 258 & var60 & var59
    return result
class class11(object):
    def func10(self, arg37, arg38):
        result = -1 ^ arg38 | (arg38 | arg37)
        return result
class class9(object):
    def func10(self, arg35, arg36):
        result = ((0 - arg36 | 1164988288 & arg36) - -1256752782) & -1 | 1973137723
        return result
def func6(arg10, arg11):
    var15 = func7(arg11, arg10)
    var16 = 254415805 ^ (var15 + 382224434) - var15
    var17 = (arg10 & var15) ^ 32
    var18 = var15 | (arg10 | (var15 ^ -835332068))
    var19 = var15 | 116
    if var16 < var16:
        var20 = (arg10 & 411021503 - var16) ^ var18
    else:
        var20 = (arg10 | var19) ^ -316
    var21 = var17 & (var16 + var15) ^ var15
    var22 = (var19 ^ arg11 ^ 665670754) ^ var19
    var23 = var19 & (var22 ^ var18) + var17
    var24 = (var22 | var22 ^ var16) | var16
    var25 = (var18 + var15) ^ 228881007 | var23
    if var21 < var25:
        var26 = (478 & var25 - var17) + var15
    else:
        var26 = (var21 & var19 + 765) ^ var23
    var27 = arg10 ^ 322116050
    var28 = var25 - arg10
    var29 = var17 | arg10
    var30 = ((1904644337 + var27) + var19) - var22
    var31 = (1276428110 - var21 & var16) - var23
    if var28 < var21:
        var32 = ((var21 | var29) & var24) & var16
    else:
        var32 = var27 & var25
    var33 = var22 - (var15 - var29) - arg10
    result = ((var19 & (var15 | var29)) - var31 & var24 & var21 - var33 ^ -1504036372) & (var21 | arg11)
    return result
def func5():
    closure = [-2]
    def func4(arg7, arg8):
        closure[0] += func6(arg7, arg8)
        return closure[0]
    func = func4
    return func
var9 = func5()
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = (-6 | acc) & acc
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
def func7(arg12, arg13):
    closure = [0]
    def func8(acc, rest):
        var14 = closure[0] + ((rest & 2) - closure[0])
        closure[0] += var14
        if acc == 0:
            return var14
        else:
            result = func8(acc - 1, var14)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 65'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    var34 = var9(arg1, arg2)
    if var34 < arg2:
        var39 = class9()
    else:
        var39 = class11()
    for var40 in range(25):
        var39.func10(var34, arg1)
    var62 = func13(arg2, var34)
    var63 = (-916 + (arg2 | var62 | var6 + var62 ^ 463)) - (arg2 ^ (var34 | (arg1 - var34)) - 138 | var6)
    var64 = arg2 - ((var34 | var63) - ((var6 - (var6 & (13 + var63) & var34 | arg1) ^ (var34 + arg1 ^ arg1 ^ (arg1 ^ (var34 & (var34 | arg1)) - arg1) + var6 & 2)) & 299918109) & var34) ^ var34
    result = var34 & (var64 & var62 - var64 + (-115 & var34))
    return result
def func13(arg41, arg42):
    var43 = arg42 - 740 ^ arg42 & arg41
    var44 = arg41 + (arg41 ^ var43) - arg42
    var45 = arg42 - (arg41 - var43) + var44
    var46 = var44 | (var45 & -782) | arg41
    var47 = var46 + (var44 | var45 + var44)
    var48 = (var47 | arg42) | var44 - var43
    var49 = (var45 | arg41) - arg42
    var50 = var48 + arg41 | var47 ^ var45
    var51 = (var45 + arg41 ^ arg42) - var45
    var52 = (-1754840113 ^ var46 & var45) - arg41
    var53 = var50 ^ arg41 & var47 - var44
    var54 = (var52 - var43) + var51 - var45
    var55 = var53 + var54
    if var52 < var44:
        var56 = arg41 + (arg42 - arg41 + 95)
    else:
        var56 = (arg41 | var50) & var52
    var57 = var45 - (var52 + var46) - arg41
    var58 = var45 + ((var46 | var51) + arg42)
    var59 = var50 ^ var51 - var44
    var60 = var57 - 678
    var61 = var50 + -953
    result = ((var58 + arg41 | (var46 - (arg42 & arg41) ^ var49)) | var55) & -950 | var54 + 258 & var60 & var59
    return result
class class11(object):
    def func10(self, arg37, arg38):
        result = -1 ^ arg38 | (arg38 | arg37)
        return result
class class9(object):
    def func10(self, arg35, arg36):
        result = ((0 - arg36 | 1164988288 & arg36) - -1256752782) & -1 | 1973137723
        return result
def func6(arg10, arg11):
    var15 = func7(arg11, arg10)
    var16 = 254415805 ^ (var15 + 382224434) - var15
    var17 = (arg10 & var15) ^ 32
    var18 = var15 | (arg10 | (var15 ^ -835332068))
    var19 = var15 | 116
    if var16 < var16:
        var20 = (arg10 & 411021503 - var16) ^ var18
    else:
        var20 = (arg10 | var19) ^ -316
    var21 = var17 & (var16 + var15) ^ var15
    var22 = (var19 ^ arg11 ^ 665670754) ^ var19
    var23 = var19 & (var22 ^ var18) + var17
    var24 = (var22 | var22 ^ var16) | var16
    var25 = (var18 + var15) ^ 228881007 | var23
    if var21 < var25:
        var26 = (478 & var25 - var17) + var15
    else:
        var26 = (var21 & var19 + 765) ^ var23
    var27 = arg10 ^ 322116050
    var28 = var25 - arg10
    var29 = var17 | arg10
    var30 = ((1904644337 + var27) + var19) - var22
    var31 = (1276428110 - var21 & var16) - var23
    if var28 < var21:
        var32 = ((var21 | var29) & var24) & var16
    else:
        var32 = var27 & var25
    var33 = var22 - (var15 - var29) - arg10
    result = ((var19 & (var15 | var29)) - var31 & var24 & var21 - var33 ^ -1504036372) & (var21 | arg11)
    return result
def func5():
    closure = [-2]
    def func4(arg7, arg8):
        closure[0] += func6(arg7, arg8)
        return closure[0]
    func = func4
    return func
var9 = func5()
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = (-6 | acc) & acc
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
def func7(arg12, arg13):
    closure = [0]
    def func8(acc, rest):
        var14 = closure[0] + ((rest & 2) - closure[0])
        closure[0] += var14
        if acc == 0:
            return var14
        else:
            result = func8(acc - 1, var14)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 65'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    var34 = var9(arg1, arg2)
    if var34 < arg2:
        var39 = class9()
    else:
        var39 = class11()
    for var40 in range(25):
        var39.func10(var34, arg1)
    var62 = func13(arg2, var34)
    var63 = (-916 + (arg2 | var62 | var6 + var62 ^ 463)) - (arg2 ^ (var34 | (arg1 - var34)) - 138 | var6)
    var64 = arg2 - ((var34 | var63) - ((var6 - (var6 & (13 + var63) & var34 | arg1) ^ (var34 + arg1 ^ arg1 ^ (arg1 ^ (var34 & (var34 | arg1)) - arg1) + var6 & 2)) & 299918109) & var34) ^ var34
    result = var34 & (var64 & var62 - var64 + (-115 & var34))
    return result
def func13(arg41, arg42):
    var43 = arg42 - 740 ^ arg42 & arg41
    var44 = arg41 + (arg41 ^ var43) - arg42
    var45 = arg42 - (arg41 - var43) + var44
    var46 = var44 | (var45 & -782) | arg41
    var47 = var46 + (var44 | var45 + var44)
    var48 = (var47 | arg42) | var44 - var43
    var49 = (var45 | arg41) - arg42
    var50 = var48 + arg41 | var47 ^ var45
    var51 = (var45 + arg41 ^ arg42) - var45
    var52 = (-1754840113 ^ var46 & var45) - arg41
    var53 = var50 ^ arg41 & var47 - var44
    var54 = (var52 - var43) + var51 - var45
    var55 = var53 + var54
    if var52 < var44:
        var56 = arg41 + (arg42 - arg41 + 95)
    else:
        var56 = (arg41 | var50) & var52
    var57 = var45 - (var52 + var46) - arg41
    var58 = var45 + ((var46 | var51) + arg42)
    var59 = var50 ^ var51 - var44
    var60 = var57 - 678
    var61 = var50 + -953
    result = ((var58 + arg41 | (var46 - (arg42 & arg41) ^ var49)) | var55) & -950 | var54 + 258 & var60 & var59
    return result
class class11(object):
    def func10(self, arg37, arg38):
        result = -1 ^ arg38 | (arg38 | arg37)
        return result
class class9(object):
    def func10(self, arg35, arg36):
        result = ((0 - arg36 | 1164988288 & arg36) - -1256752782) & -1 | 1973137723
        return result
def func6(arg10, arg11):
    var15 = func7(arg11, arg10)
    var16 = 254415805 ^ (var15 + 382224434) - var15
    var17 = (arg10 & var15) ^ 32
    var18 = var15 | (arg10 | (var15 ^ -835332068))
    var19 = var15 | 116
    if var16 < var16:
        var20 = (arg10 & 411021503 - var16) ^ var18
    else:
        var20 = (arg10 | var19) ^ -316
    var21 = var17 & (var16 + var15) ^ var15
    var22 = (var19 ^ arg11 ^ 665670754) ^ var19
    var23 = var19 & (var22 ^ var18) + var17
    var24 = (var22 | var22 ^ var16) | var16
    var25 = (var18 + var15) ^ 228881007 | var23
    if var21 < var25:
        var26 = (478 & var25 - var17) + var15
    else:
        var26 = (var21 & var19 + 765) ^ var23
    var27 = arg10 ^ 322116050
    var28 = var25 - arg10
    var29 = var17 | arg10
    var30 = ((1904644337 + var27) + var19) - var22
    var31 = (1276428110 - var21 & var16) - var23
    if var28 < var21:
        var32 = ((var21 | var29) & var24) & var16
    else:
        var32 = var27 & var25
    var33 = var22 - (var15 - var29) - arg10
    result = ((var19 & (var15 | var29)) - var31 & var24 & var21 - var33 ^ -1504036372) & (var21 | arg11)
    return result
def func5():
    closure = [-2]
    def func4(arg7, arg8):
        closure[0] += func6(arg7, arg8)
        return closure[0]
    func = func4
    return func
var9 = func5()
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = (-6 | acc) & acc
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
def func7(arg12, arg13):
    closure = [0]
    def func8(acc, rest):
        var14 = closure[0] + ((rest & 2) - closure[0])
        closure[0] += var14
        if acc == 0:
            return var14
        else:
            result = func8(acc - 1, var14)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 65'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var6 = func2(arg1, arg2)
    var34 = var9(arg1, arg2)
    if var34 < arg2:
        var39 = class9()
    else:
        var39 = class11()
    for var40 in range(25):
        var39.func10(var34, arg1)
    var62 = func13(arg2, var34)
    var63 = (-916 + (arg2 | var62 | var6 + var62 ^ 463)) - (arg2 ^ (var34 | (arg1 - var34)) - 138 | var6)
    var64 = arg2 - ((var34 | var63) - ((var6 - (var6 & (13 + var63) & var34 | arg1) ^ (var34 + arg1 ^ arg1 ^ (arg1 ^ (var34 & (var34 | arg1)) - arg1) + var6 & 2)) & 299918109) & var34) ^ var34
    result = var34 & (var64 & var62 - var64 + (-115 & var34))
    return result
def func13(arg41, arg42):
    var43 = arg42 - 740 ^ arg42 & arg41
    var44 = arg41 + (arg41 ^ var43) - arg42
    var45 = arg42 - (arg41 - var43) + var44
    var46 = var44 | (var45 & -782) | arg41
    var47 = var46 + (var44 | var45 + var44)
    var48 = (var47 | arg42) | var44 - var43
    var49 = (var45 | arg41) - arg42
    var50 = var48 + arg41 | var47 ^ var45
    var51 = (var45 + arg41 ^ arg42) - var45
    var52 = (-1754840113 ^ var46 & var45) - arg41
    var53 = var50 ^ arg41 & var47 - var44
    var54 = (var52 - var43) + var51 - var45
    var55 = var53 + var54
    if var52 < var44:
        var56 = arg41 + (arg42 - arg41 + 95)
    else:
        var56 = (arg41 | var50) & var52
    var57 = var45 - (var52 + var46) - arg41
    var58 = var45 + ((var46 | var51) + arg42)
    var59 = var50 ^ var51 - var44
    var60 = var57 - 678
    var61 = var50 + -953
    result = ((var58 + arg41 | (var46 - (arg42 & arg41) ^ var49)) | var55) & -950 | var54 + 258 & var60 & var59
    return result
class class11(object):
    def func10(self, arg37, arg38):
        result = -1 ^ arg38 | (arg38 | arg37)
        return result
class class9(object):
    def func10(self, arg35, arg36):
        result = ((0 - arg36 | 1164988288 & arg36) - -1256752782) & -1 | 1973137723
        return result
def func6(arg10, arg11):
    var15 = func7(arg11, arg10)
    var16 = 254415805 ^ (var15 + 382224434) - var15
    var17 = (arg10 & var15) ^ 32
    var18 = var15 | (arg10 | (var15 ^ -835332068))
    var19 = var15 | 116
    if var16 < var16:
        var20 = (arg10 & 411021503 - var16) ^ var18
    else:
        var20 = (arg10 | var19) ^ -316
    var21 = var17 & (var16 + var15) ^ var15
    var22 = (var19 ^ arg11 ^ 665670754) ^ var19
    var23 = var19 & (var22 ^ var18) + var17
    var24 = (var22 | var22 ^ var16) | var16
    var25 = (var18 + var15) ^ 228881007 | var23
    if var21 < var25:
        var26 = (478 & var25 - var17) + var15
    else:
        var26 = (var21 & var19 + 765) ^ var23
    var27 = arg10 ^ 322116050
    var28 = var25 - arg10
    var29 = var17 | arg10
    var30 = ((1904644337 + var27) + var19) - var22
    var31 = (1276428110 - var21 & var16) - var23
    if var28 < var21:
        var32 = ((var21 | var29) & var24) & var16
    else:
        var32 = var27 & var25
    var33 = var22 - (var15 - var29) - arg10
    result = ((var19 & (var15 | var29)) - var31 & var24 & var21 - var33 ^ -1504036372) & (var21 | arg11)
    return result
def func5():
    closure = [-2]
    def func4(arg7, arg8):
        closure[0] += func6(arg7, arg8)
        return closure[0]
    func = func4
    return func
var9 = func5()
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = (-6 | acc) & acc
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
def func7(arg12, arg13):
    closure = [0]
    def func8(acc, rest):
        var14 = closure[0] + ((rest & 2) - closure[0])
        closure[0] += var14
        if acc == 0:
            return var14
        else:
            result = func8(acc - 1, var14)
            return result
    result = func8(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 14'
    print 'arg_number: 65'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
